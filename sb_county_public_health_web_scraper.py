# -*- coding: utf-8 -*-
"""SB_County_Public_Health_Web_Scraper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QDpA6Cqk6w6PmaRmZumJ25MFUV7EPhBY
"""

from bs4 import BeautifulSoup
import requests
import pandas as pd
import numpy as np

#specify URL/web page to scrape
url = 'https://publichealthsbc.org/status-reports/'

#create user-agent (Windows 10 with Google Chrome)
user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '\
'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.03987.149 '\
'Safara/537.36'

headers = {'User-Agent': user_agent}

response = requests.get(url, headers = headers).text

#parse the HTML from the URL into the BeautifulSoup parse tree format
soup = BeautifulSoup(response, 'html.parser')

#grabbing page title to verify that we were able to successfully get requests from webpage 
soup.title

#after inspecting the page, it looks like all the tables that contain data we want have id = 'stats'
tables = soup.find_all('table', {'id':'stats'})
len(tables)

#trying to create function to convert html table to pandas dataframe, had to break this into two functions

def TableToList(table):
  #getting contents of table and converting the text into a list
  raw = list(table.find_all('td'))
  text = []
  for i in raw:
    text.append(i.text)
  return text

def ListToDf(list, no_columns):
  # calculating number of rows for dataframe
  rows = int(len(list) / no_columns)

  # converting list to numpy array to reshape
  array = np.array(list)
  array = np.reshape(array, (rows, no_columns))

  #converting array to pandas dataframe
  df = pd.DataFrame(array[1:], columns = array[0])
  return df

#creating dataframe for current stats
table1 = TableToList(tables[0])
current_stats = ListToDf(table1, 6)

#creating dataframe for cases by age
table2 = TableToList(tables[1])
table2 = table2[1:]
cases_by_age = ListToDf(table2, 5)

#creating dataframe for cases by sex
table3 = TableToList(tables[2])
table3 = table3[1:]
cases_by_sex = ListToDf(table3, 5)
cases_by_sex.columns.values[0] = 'Sex'

#creating dataframe for testing status
table4 = TableToList(tables[3])
testing_status = ListToDf(table4, 2)


#creating dataframe for high risk
table5 = TableToList(tables[4])
high_risk = ListToDf(table5, 2)

#creating dataframe for transmission method
table6 = TableToList(tables[5])
transmission_method = ListToDf(table6, 2)

#creating dataframe for recovery status
table7 = TableToList(tables[6])

#ran into an issue convering list to dataframe because website had missing values after 'Recovering in Home' and 'NO LONGER REPORTING', using a rough workaround for now to add "--" to the places where values were missing
table7.insert(13, '--')
table7.insert(15, '--')
recovery_status = ListToDf(table7, 4)

#creating dataframe for ethnicity
table8 = TableToList(tables[7])
ethnicity = ListToDf(table8, 5)

